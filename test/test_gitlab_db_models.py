from datetime import datetime

import pytest

from gitlab_api.gitlab_db_models import (
    DeployToken,
    Rule,
    AccessControl,
    Source,
    Link,
    Assets,
    Evidence,
    ReleaseLinks,
    Token,
    ToDo,
    WikiPage,
    WikiAttachmentLink,
    WikiAttachment,
    Agent,
    Agents,
    Release,
    Branch,
    ApprovalRule,
    MergeRequest,
    GroupAccess,
    DefaultBranchProtectionDefaults,
    Group,
    Webhook,
    AccessLevel,
    ApprovedBy,
    Runner,
    Job,
    Pipeline,
    PackageLink,
    PackageVersion,
    Package,
    References,
    RunnerManager,
    Permissions,
    ProjectConfig,
    Links,
    DetailedStatus,
    Contributor,
    CommitStats,
    CommitSignature,
    Comment,
    Commit,
    Membership,
    IssueStats,
    Milestone,
    TimeStats,
    TaskCompletionStatus,
    Artifact,
    ArtifactsFile,
    Configuration,
    Iteration,
    Identity,
    GroupSamlIdentity,
    CreatedBy,
    User,
    Namespace,
    ContainerExpirationPolicy,
    Statistics,
    Diff,
)


@pytest.mark.parametrize(
    "model, kwargs",
    [
        # Create the referenced records first
        (
            ProjectConfig,
            {
                "id": 1,  # Ensure this ID matches the foreign key
                "name": "project_config_1",
                "name_with_namespace": "namespace1/project_config_1",
                "path": "path1",
                "path_with_namespace": "namespace1/path1",
                "created_at": datetime.now(),
            },
        ),
        (Job, {"id": 1, "name": "job_1", "status": "status_1"}),
        (User, {"id": 1, "username": "user_1", "email": "user@example.com"}),
        (MergeRequest, {"id": 1, "iid": 1, "title": "title_1", "state": "state_1"}),
        (Group, {"id": 1, "name": "group_1", "path": "group_path"}),
        (Pipeline, {"id": 1, "iid": 1, "status": "status_1"}),
        # Create dependent records after the referenced records
        (Agent, {"config_project_id": 1}),
        (Agents, {"job_id": 1, "pipeline_id": 1}),
        (ApprovedBy, {"user_id": 1}),
        (Diff, {"merge_request_id": 1, "diff": "diff content"}),
        (
            Webhook,
            {
                "url": "http://example.com",
                "name": "webhook_1",
                "group_id": 1,
                "description": "Webhook description",
                "push_events": True,
                "issues_events": True,
                "merge_requests_events": True,
                "confidential_issues_events": True,
                "tag_push_events": True,
                "note_events": True,
                "confidential_note_events": True,
                "job_events": True,
                "pipeline_events": True,
                "wiki_page_events": True,
                "deployment_events": True,
                "releases_events": True,
                "subgroup_events": True,
                "member_events": True,
                "enable_ssl_verification": True,
                "repository_update_events": True,
                "resource_access_token_events": True,
                "created_at": datetime(year=2023, month=1, day=1, hour=0, minute=0),
            },
        ),
        (DeployToken, {"name": "deploy_token_1", "username": "username_1"}),
        (Rule, {"commit_committer_check": True, "commit_committer_name_check": False}),
        (AccessControl, {"name": "access_control_1", "access_level": 10}),
        (Source, {"format": "format_1", "url": "http://example.com"}),
        (Link, {"name": "link_1", "url": "http://example.com"}),
        (Assets, {"count": 10}),
        (Evidence, {"sha": "abc123", "filepath": "/path/to/file"}),
        (ReleaseLinks, {"closed_issues_url": "http://example.com/issues"}),
        (
            Token,
            {
                "token": "token_1",
                "token_expires_at": datetime(
                    year=2023, month=1, day=1, hour=0, minute=0
                ),
            },
        ),
        (ToDo, {"action_name": "action_1", "state": "state_1"}),
        (WikiPage, {"content": "content_1", "format": "format_1"}),
        (WikiAttachmentLink, {"url": "http://example.com"}),
        (WikiAttachment, {"file_name": "file_1", "file_path": "/path/to/file"}),
        (Release, {"tag_name": "tag_1", "description": "description_1"}),
        (Branch, {"name": "branch_1", "merged": True}),
        (ApprovalRule, {"name": "rule_1", "approvals_required": 2}),
        (GroupAccess, {"access_level": 30}),
        (DefaultBranchProtectionDefaults, {"allow_force_push": True}),
        (AccessLevel, {"access_level": 40}),
        (Runner, {"description": "runner_1", "ip_address": "127.0.0.1"}),
        (PackageLink, {"web_path": "/path/to/package"}),
        (PackageVersion, {"version": "1.0.0"}),
        (Package, {"name": "package_1", "version": "1.0.0"}),
        (Contributor, {"name": "contributor_1", "email": "contributor@example.com"}),
        (CommitStats, {"additions": 10, "deletions": 5}),
        (CommitSignature, {"signature_type": "gpg", "verification_status": "verified"}),
        (Comment, {"body": "comment_1", "note": "note_1"}),
        (Commit, {"id": 123, "message": "commit message"}),
        (Membership, {"source_id": 1, "access_level": {}}),
        (IssueStats, {"total": 10, "closed": 5}),
        (Milestone, {"title": "milestone_1", "state": "active"}),
        (TimeStats, {"time_estimate": 100, "total_time_spent": 50}),
        (TaskCompletionStatus, {"count": 10, "completed_count": 7}),
        (
            References,
            {"short": "short_ref", "relative": "relative_ref", "full": "full_ref"},
        ),
        (Artifact, {"file_type": "zip", "size": 1024, "filename": "artifact.zip"}),
        (ArtifactsFile, {"filename": "artifacts.zip", "size": 2048}),
        (
            RunnerManager,
            {"system_id": "sys123", "version": "v1.0", "platform": "linux"},
        ),
        (Configuration, {"approvals_before_merge": 2, "reset_approvals_on_push": True}),
        (Iteration, {"title": "Iteration 1", "state": 1}),
        (Identity, {"provider": "gitlab", "extern_uid": "user123"}),
        (GroupSamlIdentity, {"extern_uid": "saml123", "provider": "saml"}),
        (CreatedBy, {"username": "creator_user", "name": "Creator Name"}),
        (Namespace, {"id": 1, "name": "namespace_1", "path": "namespace_path"}),
        (ContainerExpirationPolicy, {"cadence": "1d", "enabled": True}),
        (
            Permissions,
            {
                "project_access": {"access_level": 30},
                "group_access": {"access_level": 40},
            },
        ),
        (Statistics, {"commit_count": 100, "storage_size": 2048}),
        (
            Links,
            {
                "self_link": "http://example.com/project",
                "issues": "http://example.com/issues",
            },
        ),
        (
            DetailedStatus,
            {"icon": "icon.png", "text": "status text", "label": "status label"},
        ),
    ],
)
def test_model_creation(session, model, kwargs):
    instance = model(**kwargs)
    session.add(instance)
    session.commit()

    retrieved = session.query(model).first()
    for key, value in kwargs.items():
        assert getattr(retrieved, key) == value
